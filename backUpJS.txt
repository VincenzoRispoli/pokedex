let currentPokemon;
let currentSpeciesPokemon;
let bgCardColor;
let barsColor;
let gender;
let formattedGender;
let mainUrl = 'https://pokeapi.co/api/v2/pokemon/';
let evolutionChainUrl = 'https://pokeapi.co/api/v2/evolution-chain/'
let currentPokemonEvolution;
let pokemon = [];
let pokemonEvolutionsNames = [];
let pokemonEvolutionsImages = [];
let currentSlide = 0;
const movesPerSlide = 18;
let startFrom = 0;
let limitPokemon = 10;

// inizializzation function
async function init() {
    startFrom = 0;
    pokemon = [];
    document.getElementById('pokedex').innerHTML = '';
    // startLoadingCurtain()
    await includeHTML();
    await takeAllPokemon();
    hideStartLoadingCurtain()
    document.getElementById('load-more-poke-button').disabled = false;
}
// take all pokemon with the main link from the Api
async function takeAllPokemon() {
    let url = mainUrl + `?offset=${startFrom}&limit=${limitPokemon}`
    let response = await fetch(url);
    let allPokemon = await response.json();
    await loadPokemon(allPokemon);
    await loadPokemonInthePokedex();
}

// pick all pokemon Names from the Array allPokemon['results'] and push into the array Pokemon
async function loadPokemon(allPokemon) {
    let pokemonNames = await allPokemon['results']
    // pokemon = []; // svuoto l'array prima di caricare altri 30 pokemon, altrimenti i gia presenti 30 pokemon
    // verranno sommati ai nuovi 60 che arrivano con la funzione loadMorePokemon() e mi troverei dei doppioni nel pokedex.
    for (let i = 0; i < pokemonNames.length; i++) {
        let name = pokemonNames[i]['name'];
        pokemon.push(name);
    }
}

async function loadPokemonInthePokedex() {
    let pokedex = document.getElementById('pokedex');
    for (let i = startFrom; i < pokemon.length; i++) {
        let url = mainUrl + pokemon[i];
        let response = await fetch(url);
        currentPokemon = await response.json();
        let name = currentPokemon['name'];
        let formatName = capitalizeFirstLetter(name)
        let image = currentPokemon['sprites']['other']['dream_world']['front_default'];
        let id = (currentPokemon['id'] / 100);
        let formattedId = id.toFixed(2).replace('.', '').padStart(3, '0');
        loadPokedexCardsHTML(i, pokedex, formatName, formattedId, image);
        getPokedexCardTypes(i, currentPokemon);
        await getOtherPokemonInfos(i, currentPokemon);
    }
}

async function getOtherPokemonInfos(i, currentPokemon) {
    let url = `https://pokeapi.co/api/v2/pokemon-species/${pokemon[i]}/`;
    let response = await fetch(url);
    currentSpeciesPokemon = await response.json();
    console.log(currentSpeciesPokemon);
    bgCardColor = currentSpeciesPokemon['color']['name'];
    prettierCardColors()
    if (backgroundColorIsWhite()) {
        setInTheWhiteCard_DarkText(i, currentPokemon)
    }
    document.getElementById(`pokedex-card${i}`).style.backgroundColor = bgCardColor;
}


// function getOtherPokemonInfos(): prendi le informazioni da species che a sua volta ha un altro url;
// quindi tramite for loop, per tutti i pokemon presenti nell'array pokemon, prendi l'url con le altre informazioni
// adesso la nuova variabile currentSpeciesPokemon conterrÃ¡ il json del'url species.

// if the background of a pokemon card in the pokedex is white, set dark text when the app load
function setInTheWhiteCard_DarkText(i, currentPokemon) {
    document.getElementById(`poke-name${i}`).style.color = '#000';
    document.getElementById(`id${i}`).style.color = '#000';
    let typesContainer = document.getElementById(`types-container${i}`);
    typesContainer.innerHTML = '';
    for (let j = 0; j < currentPokemon['types'].length; j++) {
        let type = currentPokemon['types'][j]['type']['name'];
        typesContainer.innerHTML += `
        <span id="type${j}" class="type" style="background:#000; color:#fff;">${type}</span>
        `
    }
}
async function loadMorePokemon(event) {
    startFrom += 10;
    showLoadingMorePokemonCurtain();
    await takeAllPokemon();
    hideLoadingMorePokemonCurtain();
    event.preventDefault();
}

// Searching Pokemon Functions ---------------------------------------------->
async function takeSearchedPokemon() {
    let input = document.getElementById('input').value;
    input = input.toLowerCase();
    let pokedex = document.getElementById('pokedex');
    pokedex.innerHTML = '';
    renderSearchedPokemon(pokedex, input)
}

async function renderSearchedPokemon(pokedex, input) {
    for (let i = 0; i < pokemon.length; i++) {
        let url = mainUrl + pokemon[i];
        let response = await fetch(url);
        currentPokemon = await response.json();
        let name = currentPokemon['name'];
        let formatName = capitalizeFirstLetter(name)
        let image = currentPokemon['sprites']['other']['dream_world']['front_default'];
        let id = (currentPokemon['id'] / 100);
        let formattedId = id.toFixed(2).replace('.', '').padStart(3, '0');
        if (name.toLowerCase().includes(input)) {
            loadPokedexCardsHTML(i, pokedex, formatName, formattedId, image);
            await getTypesOfTheSearchedPokemon(i, currentPokemon);
            await getColorInTheSearchedPokemon(i, currentPokemon);
        }
    }
    document.getElementById('load-more-poke-button').disabled = true

}

async function getTypesOfTheSearchedPokemon(i, currentPokemon) {
    let typeSearchedPokeContainer = document.getElementById(`types-container${i}`);
    for (let j = 0; j < currentPokemon['types'].length; j++) {
        let type = currentPokemon['types'][j]['type']['name'];
        typeSearchedPokeContainer.innerHTML += `
        <span id="type${j}" class="type">${type}</span>
        `
    }
}

async function getColorInTheSearchedPokemon(i, currentPokemon) {
    let url = `https://pokeapi.co/api/v2/pokemon-species/${pokemon[i]}/`
    let response = await fetch(url);
    let searchedSpeciesPokemon = await response.json();
    bgCardColor = searchedSpeciesPokemon['color']['name'];
    prettierCardColors();
    if (backgroundColorIsWhite()) {
        setInTheWhiteSearchedPokemonCard_DarkText(i, currentPokemon)
    }
    document.getElementById(`pokedex-card${i}`).style.background = bgCardColor
}

function setInTheWhiteSearchedPokemonCard_DarkText(i, currentPokemon) {
    document.getElementById(`id${i}`).style.color = '#000';
    document.getElementById(`poke-name${i}`).style.color = '#000';
    let typeSearchedPokeContainer = document.getElementById(`types-container${i}`);
    typeSearchedPokeContainer.innerHTML = '';
    for (let j = 0; j < currentPokemon['types'].length; j++) {
        let type = currentPokemon['types'][j]['type']['name'];
        typeSearchedPokeContainer.innerHTML += `
        <span id="type${j}" class="type" style="background: #000; color:#fff">${type}</span>
        `
    }
}
function checkInput() {
    let input = document.getElementById('input').value;
    let inputButton = document.getElementById('input-button');
    if (input > '') {
        inputButton.disabled = false; // riabilita il button di ricerca se l'input ha un valore maggiore di 0;
    }
}

// End Searching Pokemon Finctions --------------------------------------------------->

// function show Card in the Dialog Background
async function showCard(i) {
    let dialogCard = document.getElementById('dialog-bg');
    dialogCard.classList.remove('d-none');
    let url = mainUrl + pokemon[i];
    let response = await fetch(url);
    currentPokemon = await response.json();
    let name = currentPokemon['name'];
    let formattedName = capitalizeFirstLetter(name)
    let image = currentPokemon['sprites']['other']['dream_world']['front_default']
    let id = currentPokemon['id'] / 100;
    let formattedId = id.toFixed(2).replace('.', '').padStart(3, '0');
    dialogCard.innerHTML = '';
    showCardHTML(i, dialogCard, formattedName, formattedId, image);
}

// Show About functions
function showAbout(i) {
    let infosContainer = document.getElementById(`infos-container-features${i}`);
    infosContainer.classList.remove('d-none');
    setAboutBorderBottom();
    let species = currentSpeciesPokemon['shape']['name'];
    let formattedSpecies = capitalizeFirstLetter(species);
    let height = currentPokemon['height'] * 10;
    let weight = currentPokemon['weight'] / 10 + ' kg';
    gender = currentSpeciesPokemon['gender_rate'];
    formatGender(gender)
    getShowAboutHTML(i, infosContainer, formattedSpecies, weight, height, formattedGender);
    setAbilities(i);
    setEggGroup(i);
    setGrowthRate(i);
}

function formatGender(gender){
 if(gender == 4){formattedGender = '<div class="gendersContainer"><span class="maleContainer"><img class="genderIcon" src="./icons/mars-solid.svg" alt=""> <span class="male">Male 90%</span></span><span class="femaleContainer"><img class="genderIcon" src="./icons/venus-solid.svg" alt=""> <span class="female">Female 10%</span></span></div>'}
 if(gender == 3){formattedGender = '<div class="gendersContainer"><span class="maleContainer"><img class="genderIcon" src="./icons/mars-solid.svg" alt=""> <span class="male">Male 80%</span></span><span class="femaleContainer"><img class="genderIcon" src="./icons/venus-solid.svg" alt=""> <span class="female">Female 20%</span></span></div>'}
 if(gender == 2){formattedGender = '<div class="gendersContainer"><span class="maleContainer"><img class="genderIcon" src="./icons/mars-solid.svg" alt=""> <span class="male">Male 60%</span></span><span class="femaleContainer"><img class="genderIcon" src="./icons/venus-solid.svg" alt=""> <span class="female">Female 40%</span></span></div>'}
 if(gender == 1){formattedGender = '<div class="gendersContainer"><span class="maleContainer"><img class="genderIcon" src="./icons/mars-solid.svg" alt=""> <span class="male">Male 50%</span></span><span class="femaleContainer"><img class="genderIcon" src="./icons/venus-solid.svg" alt=""> <span class="female">Female 50%</span></span></div>'}
}
// remove the border bottom color from other options(basic-state, evolution and moves), then set
// the border bottom color on the About button. 
function setAboutBorderBottom() {
    document.getElementById('basic-state').style.borderBottom = '';
    document.getElementById('evolution').style.borderBottom = '';
    document.getElementById('moves').style.borderBottom = '';
    if (backgroundColorIsWhite()) {
        document.getElementById('about').style.borderBottom = '3px solid #000'
    } else {
        document.getElementById('about').style.borderBottom = `3px solid ${bgCardColor}`
    }
}
// End of Show About functions

// start function Basic-Stats--------------------------------------------------------->
function showBasicStats(i) {
    let infosContainer = document.getElementById(`infos-container-features${i}`);
    infosContainer.classList.remove('d-none');
    document.getElementById(`infos-container${i}`).style.minHeight = '400px'
    setBasicStatsBorderBottom()
    infosContainer.innerHTML = /*html*/ `
    <div id="basic-stats-container${i}" class="basic-stats-container"></div>
    `;
    setBasicStatsElements(i);
}
function setBasicStatsElements(i) {
    let basicStatsContainer = document.getElementById(`basic-stats-container${i}`);
    let basicStats = currentPokemon['stats'];
    basicStatsLoop(basicStatsContainer, basicStats);
}

function basicStatsLoop(basicStatsContainer, basicStats) {
    let totalPower = 0;
    for (let i = 0; i < basicStats.length; i++) {
        let statName = basicStats[i]['stat']['name'];
        let formattedStatName = capitalizeFirstLetter(statName);
        let baseStat = basicStats[i]['base_stat'];
        totalPower += baseStat;
        barsColor = (baseStat < 50) ? 'red' : 'green';
        if (backgroundColorIsWhite()) {
            bgCardColor = '#000'
        }
        setStatNameBaseStatAndBarColors(basicStatsContainer, formattedStatName, baseStat, barsColor);
    }
    barsColor = (totalPower < 200) ? 'red' : 'green';
    setTotalPower(basicStatsContainer, totalPower, barsColor);
}

function setBasicStatsBorderBottom() {
    document.getElementById('about').style.borderBottom = '';
    document.getElementById('evolution').style.borderBottom = '';
    document.getElementById('moves').style.borderBottom = '';
    if (backgroundColorIsWhite()) {
        document.getElementById('basic-state').style.borderBottom = '3px solid #000'
    } else {
        document.getElementById('basic-state').style.borderBottom = `3px solid ${bgCardColor}`
    }
}
// end functions Basic-Stats---------------------------------------------------------------->

// start Evolutions Functions---------------------------------------------------------------->
async function evolutionChain() {
    let url = currentSpeciesPokemon['evolution_chain']['url'];
    let response = await fetch(url);
    currentPokemonEvolution = await response.json();
    console.log(currentPokemonEvolution);
    if (theAreThreeEvolutions(currentPokemonEvolution)) {
        takeAll3PokeNameAndPushInArray();
    } else {
        takeAll2PokeNameAndPushInArray();
    }
    await getPokemonEvolutionsImages();
    await displayEvolutionNamesAndImages()
}

function theAreThreeEvolutions(currentPokemonEvolution) {
    return (currentPokemonEvolution['chain'] &&
        currentPokemonEvolution['chain']['species'] &&
        currentPokemonEvolution['chain']['evolves_to'] &&
        currentPokemonEvolution['chain']['evolves_to'][0] &&
        currentPokemonEvolution['chain']['evolves_to'][0]['species'] &&
        currentPokemonEvolution['chain']['evolves_to'][0]['evolves_to'] &&
        currentPokemonEvolution['chain']['evolves_to'][0]['evolves_to'][0] &&
        currentPokemonEvolution['chain']['evolves_to'][0]['evolves_to'][0]['species'])
}

function takeAll3PokeNameAndPushInArray() {
    littlePokeName = currentPokemonEvolution['chain']['species']['name'];
    middlePokeName = currentPokemonEvolution['chain']['evolves_to'][0]['species']['name'];
    lastEvolutionPokeName = currentPokemonEvolution['chain']['evolves_to'][0]['evolves_to'][0]['species']['name'];
    pokemonEvolutionsNames = []
    pokemonEvolutionsNames.push(littlePokeName);
    pokemonEvolutionsNames.push(middlePokeName);
    pokemonEvolutionsNames.push(lastEvolutionPokeName);
}
function takeAll2PokeNameAndPushInArray() {
    littlePokeName = currentPokemonEvolution['chain']['species']['name'];
    middlePokeName = currentPokemonEvolution['chain']['evolves_to'][0]['species']['name'];
    pokemonEvolutionsNames = [];
    pokemonEvolutionsNames.push(littlePokeName);
    pokemonEvolutionsNames.push(middlePokeName);
}

async function getPokemonEvolutionsImages() {
    pokemonEvolutionsImages = []; // svuota lÂ´array fuori dal loop prima di ciclare le immagini dei pokemon dentro il container. Altrimenti 
    // troverai nell'array pokemonEvolutionsImages, non solo i tre pokemon interessati, ma anche quelli 
    // che sono stati precedentemente selezionati
    for (let i = 0; i < pokemonEvolutionsNames.length; i++) {
        let url = mainUrl + pokemonEvolutionsNames[i];
        let response = await fetch(url);
        currentPokemonEvolution = await response.json();
        let evolutionImage = currentPokemonEvolution['sprites']['other']['dream_world']['front_default'];
        pokemonEvolutionsImages.push(evolutionImage)
    }
}

async function displayEvolutionNamesAndImages() {
    let evolutionsContainer = document.getElementById('evolutions-curtain');
    evolutionsContainer.classList.remove('d-none');
    setEvolutionBorderBottom();
    evolutionsContainer.style.background = bgCardColor;
    evolutionsContainer.innerHTML = '';
    if (backgroundColorIsWhite()) {
        setDarkButtonAndHover(evolutionsContainer);
    } else {
        setNormalButtonAndHover(evolutionsContainer);
    }
    setEvolutionsCardsAndButtonContainer();
}

function setDarkButtonAndHover(evolutionsContainer) {
    evolutionsContainer.innerHTML += /*html*/ `
    <div id="evolutions-card-and-button-container" class="evolutions-card-and-button-container">
        </div>
        <a onmouseover="buttonHoverBlack()" onmouseleave="buttonNormalBlack()" id="curtain-button" onclick="hideEvolutionCurtain(event)" class="close-curtain-button" style="background:rgba(0,0,0,0.5)" href="">Back to Card</a>
    `
}
function setNormalButtonAndHover(evolutionsContainer) {
    evolutionsContainer.innerHTML += /*html*/ `
    <div id="evolutions-card-and-button-container" class="evolutions-card-and-button-container">
    </div>
    <a onmouseover="buttonHover()" onmouseleave="buttonNormal()" onclick="hideEvolutionCurtain(event)" id="curtain-button" class="close-curtain-button" href="">Back to Card</a>
    `
}
function setEvolutionsCardsAndButtonContainer() {
    let evoCardAndButtonContainer = document.getElementById('evolutions-card-and-button-container');
    for (let i = 0; i < pokemonEvolutionsNames.length; i++) {
        let name = pokemonEvolutionsNames[i];
        let formattedName = capitalizeFirstLetter(name)
        let image = pokemonEvolutionsImages[i];
        if (backgroundColorIsWhite()) {
            setPokeNameWithDarkText(formattedName, image, evoCardAndButtonContainer);
        } else {
            setPokeNameWithNormalText(formattedName, image, evoCardAndButtonContainer);
        }
    }
}

function setPokeNameWithDarkText(formattedName, image, evoCardAndButtonContainer) {
    evoCardAndButtonContainer.innerHTML += /*html*/ `
            <div class="name-and-img-evolution-container">
                <img class="evolution-image" src="${image}" alt="">
                <span class="evolution-name" style="color:#000">${formattedName}</span>
            </div>`
}

function setPokeNameWithNormalText(formattedName, image, evoCardAndButtonContainer) {
    evoCardAndButtonContainer.innerHTML += /*html*/ `
    <div class="name-and-img-evolution-container">
        <img class="evolution-image" src="${image}" alt="">
        <span class="evolution-name" style="color:#fff">${formattedName}</span>
    </div>
    `
}

function setEvolutionBorderBottom() {
    document.getElementById('about').style.borderBottom = '';
    document.getElementById('moves').style.borderBottom = '';
    document.getElementById('basic-state').style.borderBottom = '';
    if (backgroundColorIsWhite()) {
        document.getElementById('evolution').style.borderBottom = '3px solid #000'
    } else {
        document.getElementById('evolution').style.borderBottom = `3px solid ${bgCardColor}`
    }
}
// end Evolutions Functions---------------------------------------------------------------->

//start moves functions -------------------------------------------------------->
function moves(i) {
    let infosContainer = document.getElementById(`infos-container-features${i}`);
    infosContainer.classList.remove('d-none');
    document.getElementById(`infos-container${i}`).style.minHeight = '400px'
    setMovesBorderBottom()
    if (backgroundColorIsWhite()) {
        bgCardColor = '#000';
    }
    setColorOfMovesButtons(infosContainer);
    showMoves(currentSlide);
}

function setColorOfMovesButtons(infosContainer) {
    infosContainer.innerHTML = /*html*/`
        <div class="buttons-container">
            <a id="change-slide-button1" class="change-slide-button" onclick="changeSlide(-1)" style="background:${bgCardColor}">Previous Moves</a>
            <a id="change-slide-button2" class="change-slide-button" onclick="changeSlide(+1)" style="background:${bgCardColor}">Next Moves</a>
        </div>
        <div id="moves-container" class="moves-container"></div>
        `
}

function showMoves(slideIndex) {
    let movesCont = document.getElementById('moves-container');
    movesCont.innerHTML = '';
    for (let i = slideIndex * movesPerSlide; i < Math.min(currentPokemon['moves'].length, (slideIndex + 1) * movesPerSlide); i++) {
        let move = currentPokemon['moves'][i]['move']['name'];
        movesCont.innerHTML += /*html*/ `
                <div class="move-wrapper" style="background:${bgCardColor};">
                    <b class="moves" style="color:#fff">${move}</b>
                </div>
            `;
    }
}

function changeSlide(direction) {
    currentSlide += direction;
    if (currentSlide < 0) {
        currentSlide = Math.floor(currentPokemon['moves'].length / movesPerSlide) - 1;
    } else if (currentSlide >= Math.floor(currentPokemon['moves'].length / movesPerSlide)) {
        currentSlide = 0;
    }
    showMoves(currentSlide);
}
function setMovesBorderBottom() {
    document.getElementById('about').style.borderBottom = '';
    document.getElementById('evolution').style.borderBottom = '';
    document.getElementById('basic-state').style.borderBottom = '';
    if (backgroundColorIsWhite()) {
        document.getElementById('moves').style.borderBottom = '3px solid #000';
    } else {
        document.getElementById('moves').style.borderBottom = `3px solid ${bgCardColor}`
    }
}
// end moves functions --------------------------------------------------------------------->

function nextPokemonCard(i, event) {
    i++;
    if (i >= pokemon.length) {
        i = 0;
    }
    showCard(i);
    event.stopPropagation();
}

function previuosPokemonCard(i, event) {
    i--;
    if (i < 0) {
        i = pokemon.length - 1;
    }
    showCard(i);
    event.stopPropagation();
}

// hide the dialog onclick on background
function hideDialogBg() {
    document.getElementById('dialog-bg').classList.add('d-none')
}

function doNotClose(event) {
    event.stopPropagation();
}

// make the default colors of any pokemon, prettier
function prettierCardColors() {
    bgCardColor = (bgCardColor === 'blue') ? '#3581fc' : bgCardColor;
    bgCardColor = (bgCardColor === 'red') ? '#fc4f38' : bgCardColor;
    bgCardColor = (bgCardColor === 'green') ? '#02d66c' : bgCardColor;
    bgCardColor = (bgCardColor === 'brown') ? '#bf4d1d' : bgCardColor;
    bgCardColor = (bgCardColor === 'yellow') ? '#dbc602' : bgCardColor;
    bgCardColor = (bgCardColor === 'purple') ? '#fa5aed' : bgCardColor;
    bgCardColor = (bgCardColor === 'pink') ? '#deadde' : bgCardColor;

}

function capitalizeFirstLetter(name) {
    return name.charAt(0).toUpperCase() + name.slice(1)
}

function hideEvolutionCurtain(event) {
    document.getElementById('evolutions-curtain').classList.add('d-none');
    event.preventDefault();
}

function buttonHover() {
    document.getElementById('curtain-button').style.background = '#fff';
    document.getElementById('curtain-button').style.color = bgCardColor;
}
function buttonNormal() {
    document.getElementById('curtain-button').style.background = ''
    document.getElementById('curtain-button').style.color = '';
}

function buttonHoverBlack() {
    document.getElementById('curtain-button').style.background = '#000';
    document.getElementById('curtain-button').style.color = bgCardColor;
}
function buttonNormalBlack() {
    document.getElementById('curtain-button').style.background = 'rgba(0,0,0,0.5)';
    document.getElementById('curtain-button').style.color = bgCardColor;
}

function startLoadingCurtain() {
    let loadingCurtain = document.getElementById('loading-courtain-background');
    loadingCurtain.classList.remove('d-none');
}

function hideStartLoadingCurtain() {
    let loadingCurtain = document.getElementById('loading-courtain-background');
    loadingCurtain.classList.add('d-none');
}


function showLoadingMorePokemonCurtain() {
    let loadingMorePokeCurtain = document.getElementById('loading-more-poke-courtain');
    loadingMorePokeCurtain.classList.remove('d-none');
}

function hideLoadingMorePokemonCurtain() {
    let loadingMorePokeCurtain = document.getElementById('loading-more-poke-courtain');
    loadingMorePokeCurtain.classList.add('d-none');
}

function showArrowOnClick(i) {
    document.getElementById(`arrow-left-container${i}`).classList.remove('d-none');
    document.getElementById(`arrow-right-container${i}`).classList.remove('d-none');
    document.getElementById(`arrow-left${i}`).classList.remove('d-none');
    document.getElementById(`arrow-right${i}`).classList.remove('d-none')
    setTimeout(hideArrowFromTheDialog(i), 2000)
}

function hideArrowFromTheDialog(i) {
    document.getElementById(`arrow-left-container${i}`).classList.add('d-none');
    document.getElementById(`arrow-right-container${i}`).classList.add('d-none');
    document.getElementById(`arrow-left${i}`).classList.add('d-none');
    document.getElementById(`arrow-right${i}`).classList.add('d-none')
}

